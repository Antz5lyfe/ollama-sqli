import getpass
import os
import warnings
from langgraph.prebuilt import create_react_agent
from pydantic import BaseModel, Field
from langgraph_supervisor import create_supervisor
from langchain.chat_models import init_chat_model
from langgraph.graph import StateGraph, MessagesState, START, END
from langchain_core.messages import HumanMessage
from mcp_client import get_mcp_tools
import asyncio
from langchain_community.utilities import GoogleSerperAPIWrapper
from langchain_core.tools import Tool
import sqlite3
from langgraph.checkpoint.sqlite import SqliteSaver
from dotenv import load_dotenv

class AgentOutput(BaseModel):
    sentence: str = Field(description="A random sentence generated by the agent")


class OuterState(MessagesState):
    output: AgentOutput


load_dotenv()

def agent_node(state: OuterState):
    agent = create_react_agent(
        model="openai:gpt-4.1",
        prompt="Generate a random sentence about a topic",
        response_format=AgentOutput,
        name="random_sentence_generator",
        tools=[]
    )

    resp = agent.invoke({ "messages": state["messages"] })
    print(resp["messages"][-1].content)
    return { "messages": [resp["messages"][-1]], "output": resp["structured_response"] }

graph = StateGraph(OuterState)
graph.add_node("random_sentence_generator", agent_node)
graph.add_edge(START, "random_sentence_generator")
c = graph.compile()
result = c.invoke({ "messages": [HumanMessage(content="Snickers")] })
print(result["output"]["sentence"])