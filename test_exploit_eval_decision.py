import getpass
import os
import warnings
from langgraph.prebuilt import create_react_agent
from pydantic import BaseModel, Field
from langgraph_supervisor import create_supervisor
from langchain.chat_models import init_chat_model
from langgraph.graph import StateGraph, MessagesState, START, END
from langchain_core.messages import HumanMessage, AIMessage
from pytz import all_timezones_set
from mcp_client import get_mcp_tools
import asyncio
from langchain_community.utilities import GoogleSerperAPIWrapper
from langchain_core.tools import Tool
import sqlite3
from langgraph.checkpoint.sqlite import SqliteSaver
from dotenv import load_dotenv
from langchain_core.prompts import ChatPromptTemplate
from langgraph.prebuilt.chat_agent_executor import AgentStateWithStructuredResponse


class AgentOutput(BaseModel):
    sentence: str = Field(description="The sentence in the previous message")


class OuterState(AgentStateWithStructuredResponse):
    output: AgentOutput
    context: str


load_dotenv()

prompt = ChatPromptTemplate(
    [
        (
            "system",
            "You are to generate sentence about the user's topic",
        ),
        ("placeholder", "{messages}"),
    ]
)


agent = create_react_agent(
    model="openai:gpt-4.1-mini",
    prompt=prompt,
    response_format=("The last message contains a sentence.", AgentOutput),
    name="random_sentence_generator",
    state_schema=OuterState,
    tools=[],
)

resp = agent.invoke(
    {
        "messages": [HumanMessage(content="Chen Ning")],
    }
)
print(resp["messages"][-1], resp["structured_response"])
